// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(STUDENT)
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  enrollments Enrollment[]
  courses     Course[]     @relation("CourseInstructor")
  progress    Progress[]

  @@map("users")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  thumbnail   String?
  duration    Int      // en minutos
  level       Level    @default(BEGINNER)
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  instructorId String
  instructor   User         @relation("CourseInstructor", fields: [instructorId], references: [id])
  enrollments  Enrollment[]
  lessons      Lesson[]
  progress     Progress[]

  @@map("courses")
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  description String?
  videoUrl    String?
  duration    Int      // en minutos
  order       Int
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  courseId String
  course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress Progress[]

  @@unique([courseId, order])
  @@map("lessons")
}

model Enrollment {
  id        String      @id @default(cuid())
  status    EnrollmentStatus @default(ACTIVE)
  enrolledAt DateTime   @default(now())
  completedAt DateTime?

  // Relaciones
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("enrollments")
}

model Progress {
  id        String   @id @default(cuid())
  completed Boolean  @default(false)
  completedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessonId String?
  lesson   Lesson? @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId, lessonId])
  @@map("progress")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}